<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <snapshot/>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-10-28 16:21:34</sys_created_on>
        <sys_id>33c4b02c1b2330101f1b96c6b04bcbc5</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="DateSelection" source="x_402400_dateselec">ce0098d01b6730101f1b96c6b04bcbe5</sys_package>
        <sys_policy/>
        <sys_scope display_value="DateSelection">ce0098d01b6730101f1b96c6b04bcbe5</sys_scope>
        <sys_update_name>sys_atf_step_33c4b02c1b2330101f1b96c6b04bcbc5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-21 20:44:44</sys_updated_on>
        <table/>
        <test display_value="Fiscal Funding Filter">7094fce81b2330101f1b96c6b04bcb7f</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=33c4b02c1b2330101f1b96c6b04bcbc5"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>33c4b02c1b2330101f1b96c6b04bcbc5</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-10-28 16:21:34</sys_created_on>
        <sys_id>4855742c1b2330101f1b96c6b04bcb07</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-10-28 16:21:34</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>33c4b02c1b2330101f1b96c6b04bcbc5</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-10-28 16:21:34</sys_created_on>
        <sys_id>8055742c1b2330101f1b96c6b04bcb08</sys_id>
        <sys_mod_count>21</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-01-21 20:44:44</sys_updated_on>
        <value>// You can use this step to execute a variety of server-side javascript tests including&#13;
// jasmine tests and custom assertions&#13;
//&#13;
//&#13;
// Pass or fail a step: Override the step outcome to pass or fail. This is ignored &#13;
//                      by jasmine tests&#13;
//&#13;
//  - Return true from the main function body to pass the step&#13;
//  - Return false from the main function body to fail the step&#13;
//&#13;
//&#13;
// outputs:       Pre-defined Step config Output variables to set on this step during &#13;
//                execution that are available to later steps&#13;
//&#13;
// steps(SYS_ID): A function to retrieve Output variable data from a step that executed&#13;
//                earlier in the test. The desired step's sys_id is required&#13;
//&#13;
//  Example:&#13;
//&#13;
//      // Test step 1 - add data&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      // this sample step's Step config has Output variables named table and record_id&#13;
//      outputs.table = 'sc_task';&#13;
//      outputs.record_id = gr.insert();&#13;
//&#13;
//      // Test step 2 - access added data and validate&#13;
//      // check that the record exists (or that business logic changed it)&#13;
//      var gr = new GlideRecord("sc_task");&#13;
//      gr.get(steps(PREVIOUS_STEP_SYS_ID).record_id);&#13;
//      assertEqual({name: "task gr exists", shouldbe: true, value: gr.isValidRecord()});&#13;
//&#13;
//&#13;
// stepResult.setOutputMessage: Log a message to step results after step executes.&#13;
//                              Can only be called once or will overwrite previous &#13;
//                              message&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var gr = new GlideRecord('sc_task');&#13;
//      gr.setValue('short_description', 'verify task can be inserted');&#13;
//      var grSysId = gr.insert();&#13;
//      var justCreatedGR = new GlideRecord('sc_task');&#13;
//      if (justCreatedGR.get(grSysId)) {&#13;
//            stepResult.setOutputMessage("Successfully inserted task record");&#13;
//            return true; // pass the step&#13;
//      } else { &#13;
//            stepResult.setOutputMessage("Failed to insert task record");&#13;
//            return false; // fail the step&#13;
//      }&#13;
//&#13;
//&#13;
// Note: describe is only supported in Global scope.&#13;
// Use 'describe' to create a suite of test scripts and 'it' to define test expectations&#13;
//&#13;
//  Example jasmine test:&#13;
//&#13;
//      describe('my suite of script tests', function() {&#13;
//            it('should meet expectations', function() {&#13;
//                  expect(true).not.toBe(false);&#13;
//            });&#13;
//      });&#13;
//      // make sure to uncomment jasmine.getEnv().execute(); outside the function body&#13;
//&#13;
//&#13;
// assertEqual: A function used to compare that assertion.shouldbe == assertion.value;&#13;
//              in case of failure it throws an Error and logs that the assertion by&#13;
//              name has failed&#13;
//&#13;
//  Example:&#13;
//&#13;
//      var testAssertion = {&#13;
//            name: "my test assertion",&#13;
//            shouldbe: "expected value"&#13;
//            value: "actual value",&#13;
//      };&#13;
//      assertEqual(testAssertion); // throws Error, logs message to test step output&#13;
//&#13;
(function(outputs, steps, stepResult, assertEqual) {&#13;
&#13;
    gs.setProperty('x_402400_dateselec.fiscal_year', '22', 'Fiscal Year');&#13;
&#13;
    var grFiscalCalendar = new GlideRecord('x_402400_dateselec_fiscal_calendar');&#13;
    grFiscalCalendar.initialize();&#13;
    grFiscalCalendar.setValue('u_name', 'FY22');&#13;
    grFiscalCalendar.setValue('u_end_date', '2021-10-01 00:00:00');&#13;
    grFiscalCalendar.setValue('u_start_date', '2022-09-30 11:59:59');&#13;
    grFiscalCalendar.insert();&#13;
&#13;
    describe('Fiscal year filter function', function() {&#13;
        var fiscalYear = gs.getProperty('x_402400_dateselec.fiscal_year');&#13;
        it('should return property equal to 22', function() {&#13;
            expect(fiscalYear).toBe('22');&#13;
        });&#13;
        it('should return reference qual formatted string based on system property value', function() {&#13;
            var utilities = new Utilities();&#13;
            var result = utilities.fiscalFunding();&#13;
            expect(result).toBe('u_nameIN' + 'FY' + fiscalYear);&#13;
        });&#13;
    });&#13;
&#13;
})(outputs, steps, stepResult, assertEqual);&#13;
// uncomment the next line to execute this script as a jasmine test&#13;
jasmine.getEnv().execute();</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
